import { testingAsserts as ta } from "../deps-test.ts";
import * as ws from "../lib/universal/whitespace.ts";
import * as SQLa from "../render/mod.ts";
import * as mod from "./typical.ts";
//import * as erd from "../render/doc/plantuml/mod.ts";

// deno-lint-ignore no-explicit-any
type Any = any;

export function syntheticSchema<Context extends SQLa.SqlEmitContext>(
  ddlOptions: SQLa.SqlTextSupplierOptions<Context> & {
    readonly sqlNS?: SQLa.SqlNamespaceSupplier;
  },
) {
  const gm = mod.governedModel<mod.GovernedDomain, Context>(ddlOptions);
  const { domains: sd, tcFactory: tcf, keys, housekeeping } = gm;

  enum HostType {
    linux, // code is text, value is a number
    windows,
  }

  const hostType = gm.ordinalEnumTable("host_type", HostType);

  const publHost = gm.textPkTable("publ_host", {
    publ_host_id: keys.textPrimaryKey(),
    host: tcf.unique(sd.text()),
    host_identity: sd.jsonTextNullable(),
    host_type_code: hostType.references.code(),
    mutation_count: sd.integer(),
    ...housekeeping.columns,
  });

  // TODO: SELECT * is bad so use SELECT ${publHost.columnsAll} or similar
  const { columns: phc } = publHost;
  const publHostView = gm.safeView(
    "publ_host_vw",
    publHost.zoSchema.shape,
  )`SELECT * FROM ${publHost.tableName} WHERE ${phc.host} = 'my_host'`;

  enum BuildEventType {
    code1 = "value1",
    code2 = "value2",
  }

  const buildEventType = gm.textEnumTable(
    "build_event_type",
    BuildEventType,
    { isIdempotent: true },
  );

  const publBuildEventName = "publ_build_event" as const;
  const publBuildEvent = gm.autoIncPkTable(publBuildEventName, {
    publ_build_event_id: keys.autoIncPrimaryKey(),
    publ_host_id: publHost.references.publ_host_id(),
    build_event_type: buildEventType.references.code(),
    iteration_index: sd.integer(),
    build_initiated_at: sd.dateTime(),
    build_completed_at: sd.dateTime(),
    build_duration_ms: sd.integer(),
    resources_originated_count: sd.integer(),
    resources_persisted_count: sd.integer(),
    resources_memoized_count: sd.integer(),
    ...housekeeping.columns,
  });

  const publServerService = gm.autoIncPkTable("publ_server_service", {
    publ_server_service_id: keys.autoIncPrimaryKey(),
    service_started_at: sd.dateTime(),
    listen_host: sd.text(),
    listen_port: sd.integer(),
    publish_url: sd.text(),
    publ_build_event_id: publBuildEvent.references.publ_build_event_id(),
    ...housekeeping.columns,
  });

  const publServerStaticAccessLog = gm.autoIncPkTable(
    "publ_server_static_access_log",
    {
      publ_server_static_access_log_id: keys.autoIncPrimaryKey(),
      status: sd.integer(),
      asset_nature: sd.text(),
      location_href: sd.text(),
      filesys_target_path: sd.text(),
      filesys_target_symlink: sd.textNullable(),
      publ_server_service_id: publServerService.references
        .publ_server_service_id(),
      ...housekeeping.columns,
    },
  );

  const publServerErrorLog = gm.autoIncPkTable("publ_server_error_log", {
    publ_server_error_log_id: keys.autoIncPrimaryKey(),
    location_href: sd.text(),
    error_summary: sd.text(),
    host_identity: sd.jsonTextNullable(),
    publ_server_service_id: publServerService.references
      .publ_server_service_id(),
    ...housekeeping.columns,
  });

  return {
    governedModel: gm,
    publHost,
    publBuildEvent,
    publServerService,
    publServerStaticAccessLog,
    publServerErrorLog,
    publHostView,
    hostType,
    buildEventType,
  };
}

Deno.test("SQL Aide (SQLa) type-safe string template", () => {
  // deno-lint-ignore no-empty-interface
  interface SyntheticTmplContext extends SQLa.SqlEmitContext {
  }
  const stContext = (): SyntheticTmplContext => SQLa.typicalSqlEmitContext();
  const gts = mod.governedTemplateState<
    mod.GovernedDomain,
    SyntheticTmplContext
  >();
  const ss = syntheticSchema<SyntheticTmplContext>(gts.ddlOptions);

  // deno-fmt-ignore
  const DDL = SQLa.SQL<SyntheticTmplContext>(gts.ddlOptions)`
    -- Generated by unit test. DO NOT EDIT.
    -- Governance:
    -- * use 3rd normal form for tables
    -- * use views to wrap business logic
    -- * when denormalizing is required, use views (don't denormalize tables)
    -- * each table name MUST be singular (not plural) noun
    -- * each table MUST have a \`table_name\`_id primary key (typicalTableDefn will do this automatically)
    -- * each table MUST have \`created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL\` column (typicalTableDefn will do this automatically)
    -- * if table's rows are mutable, it MUST have a \`updated_at DATETIME\` column (not having an updated_at means it's immutable)
    -- * if table's rows are deleteable, it MUST have a \`deleted_at DATETIME\` column for soft deletes (not having an deleted_at means it's immutable)

    ${gts.lintState.sqlTextLintSummary}

    ${ss.hostType}

    ${ss.publHost}
    ${gts.persist(ss.publHost, "publ-host.sql")}

    ${ss.publHostView}

    ${ss.buildEventType}

    ${ss.publBuildEvent}

    ${ss.publServerService}

    ${ss.publServerStaticAccessLog}

    ${ss.publServerErrorLog}

    ${ss.publHost.insertDML({ publ_host_id: "test", host: "test", host_identity: "testHI", mutation_count: 0, host_type_code: ss.hostType.seedEnum.linux })}

    ${ss.publHost.select({ host_identity: "testHI"})}

    -- TypeScript numeric enum object entries as RDBMS rows
    ${ss.hostType.seedDML}

    -- TypeScript text enum object entries as RDBMS rows
    ${ss.buildEventType.seedDML}

    ${gts.lintState.sqlTmplEngineLintSummary}`;

  const syntheticSQL = DDL.SQL(stContext());
  if (DDL.stsOptions.sqlTextLintState?.lintedSqlText.lintIssues?.length) {
    console.dir(DDL.stsOptions.sqlTextLintState?.lintedSqlText.lintIssues);
  }
  ta.assertEquals(syntheticSQL, fixturePrime);
  ta.assertEquals(
    0,
    DDL.stsOptions.sqlTextLintState?.lintedSqlText.lintIssues?.length,
  );
  ta.assertEquals(gts.tablesDeclared.size, 7);
  ta.assertEquals(gts.viewsDeclared.size, 1);
});

// deno-fmt-ignore
const fixturePrime = ws.unindentWhitespace(`
  -- Generated by unit test. DO NOT EDIT.
  -- Governance:
  -- * use 3rd normal form for tables
  -- * use views to wrap business logic
  -- * when denormalizing is required, use views (don't denormalize tables)
  -- * each table name MUST be singular (not plural) noun
  -- * each table MUST have a \`table_name\`_id primary key (typicalTableDefn will do this automatically)
  -- * each table MUST have \`created_at DATETIME DEFAULT CURRENT_TIMESTAMP NOT NULL\` column (typicalTableDefn will do this automatically)
  -- * if table's rows are mutable, it MUST have a \`updated_at DATETIME\` column (not having an updated_at means it's immutable)
  -- * if table's rows are deleteable, it MUST have a \`deleted_at DATETIME\` column for soft deletes (not having an deleted_at means it's immutable)

  -- no SQL lint issues (typicalSqlTextLintManager)

  CREATE TABLE IF NOT EXISTS "host_type" (
      "code" INTEGER PRIMARY KEY NOT NULL,
      "value" TEXT NOT NULL,
      "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS "publ_host" (
      "publ_host_id" TEXT PRIMARY KEY NOT NULL,
      "host" TEXT /* UNIQUE COLUMN */ NOT NULL,
      "host_identity" JSON,
      "host_type_code" INTEGER NOT NULL,
      "mutation_count" INTEGER NOT NULL,
      "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
      "created_by" TEXT DEFAULT 'UNKNOWN',
      FOREIGN KEY("host_type_code") REFERENCES "host_type"("code"),
      UNIQUE("host")
  );
  -- encountered persistence request for 1_publ-host.sql

  CREATE VIEW IF NOT EXISTS "publ_host_vw"("publ_host_id", "host", "host_identity", "host_type_code", "mutation_count", "created_at", "created_by") AS
      SELECT * FROM publ_host WHERE "SQL_DOMAIN_NOT_IN_COLLECTION" = 'my_host';

  CREATE TABLE IF NOT EXISTS "build_event_type" (
      "code" TEXT PRIMARY KEY NOT NULL,
      "value" TEXT NOT NULL,
      "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS "publ_build_event" (
      "publ_build_event_id" INTEGER PRIMARY KEY AUTOINCREMENT,
      "publ_host_id" TEXT NOT NULL,
      "build_event_type" TEXT NOT NULL,
      "iteration_index" INTEGER NOT NULL,
      "build_initiated_at" DATETIME NOT NULL,
      "build_completed_at" DATETIME NOT NULL,
      "build_duration_ms" INTEGER NOT NULL,
      "resources_originated_count" INTEGER NOT NULL,
      "resources_persisted_count" INTEGER NOT NULL,
      "resources_memoized_count" INTEGER NOT NULL,
      "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
      "created_by" TEXT DEFAULT 'UNKNOWN',
      FOREIGN KEY("publ_host_id") REFERENCES "publ_host"("publ_host_id"),
      FOREIGN KEY("build_event_type") REFERENCES "build_event_type"("code")
  );

  CREATE TABLE IF NOT EXISTS "publ_server_service" (
      "publ_server_service_id" INTEGER PRIMARY KEY AUTOINCREMENT,
      "service_started_at" DATETIME NOT NULL,
      "listen_host" TEXT NOT NULL,
      "listen_port" INTEGER NOT NULL,
      "publish_url" TEXT NOT NULL,
      "publ_build_event_id" INTEGER NOT NULL,
      "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
      "created_by" TEXT DEFAULT 'UNKNOWN',
      FOREIGN KEY("publ_build_event_id") REFERENCES "publ_build_event"("publ_build_event_id")
  );

  CREATE TABLE IF NOT EXISTS "publ_server_static_access_log" (
      "publ_server_static_access_log_id" INTEGER PRIMARY KEY AUTOINCREMENT,
      "status" INTEGER NOT NULL,
      "asset_nature" TEXT NOT NULL,
      "location_href" TEXT NOT NULL,
      "filesys_target_path" TEXT NOT NULL,
      "filesys_target_symlink" TEXT,
      "publ_server_service_id" INTEGER NOT NULL,
      "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
      "created_by" TEXT DEFAULT 'UNKNOWN',
      FOREIGN KEY("publ_server_service_id") REFERENCES "publ_server_service"("publ_server_service_id")
  );

  CREATE TABLE IF NOT EXISTS "publ_server_error_log" (
      "publ_server_error_log_id" INTEGER PRIMARY KEY AUTOINCREMENT,
      "location_href" TEXT NOT NULL,
      "error_summary" TEXT NOT NULL,
      "host_identity" JSON,
      "publ_server_service_id" INTEGER NOT NULL,
      "created_at" DATETIME DEFAULT CURRENT_TIMESTAMP,
      "created_by" TEXT DEFAULT 'UNKNOWN',
      FOREIGN KEY("publ_server_service_id") REFERENCES "publ_server_service"("publ_server_service_id")
  );

  INSERT INTO "publ_host" ("publ_host_id", "host", "host_identity", "host_type_code", "mutation_count", "created_by") VALUES ('test', 'test', 'testHI', 0, 0, NULL);

  SELECT "publ_host_id" FROM "publ_host" WHERE "host_identity" = 'testHI';

  -- TypeScript numeric enum object entries as RDBMS rows
  INSERT INTO "host_type" ("code", "value") VALUES (0, 'linux');
  INSERT INTO "host_type" ("code", "value") VALUES (1, 'windows');

  -- TypeScript text enum object entries as RDBMS rows
  INSERT INTO "build_event_type" ("code", "value") VALUES ('code1', 'value1');
  INSERT INTO "build_event_type" ("code", "value") VALUES ('code2', 'value2');

  -- no template engine lint issues (typicalSqlTextLintManager)`);
